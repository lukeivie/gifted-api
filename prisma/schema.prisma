// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String @id @default(uuid())
  externalId String @unique

  giftlists  Giftlist[]
  wishlists  Wishlist[]
  recipients Recipient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Recipient {
  id           String        @id @default(uuid())
  name         String        @unique
  relationship Relationship? @default(FRIEND)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  gifts Gift[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Relationship {
  FRIEND
  BROTHER
  SISTER
  MOTHER
  FATHER
  GIRLFRIEND
  BOYFRIEND
  WIFE
  HUSBAND
  PARTNER
  MUSE
  COWORKER
  SON
  DAUGHTER
  GRANDMOTHER
  GRANDFATHER
  STEP_BROTHER
  STEP_SISTER
  STEP_MOTHER
  STEP_FATHER
  STEP_SON
  STEP_DAUGHTER
  BROTHER_IN_LAW
  SISTER_IN_LAW
  MOTHER_IN_LAW
  FATHER_IN_LAW
  SON_IN_LAW
  DAUGHTER_IN_LAW
}

model Giftlist {
  id    String @id @default(uuid())
  title String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  gifts Gift[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Gift {
  id           String     @id @default(uuid())
  name         String
  price        Decimal?   @db.Decimal(8, 2)
  brand        String?
  url          String?
  trackingId   String?
  trackingLink String?
  status       GiftStatus @default(IDEA)

  recipient   Recipient? @relation(fields: [recipientId], references: [id])
  recipientId String

  giftlist   Giftlist @relation(fields: [giftlistId], references: [id])
  giftlistId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images GiftImages[]
}

enum GiftStatus {
  IDEA
  PURCHASED
  ON_THE_WAY
  DELIVERED
  WRAPPED
  GIFTED
}

model Wishlist {
  id         String  @id @default(uuid())
  title      String  @unique
  isPublic   Boolean @default(true)
  isArchived Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  wishes Wish[]
}

model Wish {
  id         String   @id @default(uuid())
  name       String
  price      Decimal? @db.Decimal(8, 2)
  brand      String?
  url        String?
  isPublic   Boolean  @default(true)
  isComplete Boolean  @default(false)

  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  wishlistId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images WishImages[]
}

model WishImages {
  image   Image  @relation(fields: [imageId], references: [id])
  imageId String
  wish    Wish   @relation(fields: [wishId], references: [id])
  wishId  String

  isPrimary Boolean @default(false)

  @@id([imageId, wishId])
}

model GiftImages {
  image   Image  @relation(fields: [imageId], references: [id])
  imageId String
  gift    Gift   @relation(fields: [giftId], references: [id])
  giftId  String

  isPrimary Boolean @default(false)

  @@id([imageId, giftId])
}

model Image {
  id  String  @id @default(uuid())
  alt String?
  url String

  uploadedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  wishes     WishImages[]
  GiftImages GiftImages[]
}
